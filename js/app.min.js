"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
document.addEventListener('DOMContentLoaded', function () {
  // height (100vh) fix for IOS
  var vh = window.innerHeight * 0.01;
  document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));

  // resize
  window.addEventListener('resize', function () {
    var vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
  });

  // tabs
  var tabsItems = document.querySelectorAll('.tabs__item');
  if (tabsItems) {
    tabsItems.forEach(function (item, i) {
      item.addEventListener('click', function () {
        var parent = item.closest('.tabs');
        parent.querySelectorAll('.tabs__item').forEach(function (child) {
          return child.classList.remove('is--active');
        });
        parent.querySelectorAll('.tabs__wrapper').forEach(function (child) {
          return child.classList.remove('is--active');
        });
        item.classList.add('is--active');
        var el = parent.querySelector('.tabs__item.is--active');
        var index = _toConsumableArray(parent.querySelectorAll('.tabs__item')).indexOf(el);
        parent.querySelectorAll('.tabs__wrapper')[index].classList.add('is--active');
      });
    });
  }

  // product slider
  var galleryThumb = document.querySelector('.gallery-thumbs');
  var galleryMain = document.querySelector('.gallery-main');
  if (galleryThumb && galleryMain) {
    var mySwiperThumb = new Swiper(galleryThumb, {
      allowTouchMove: false,
      slidesPerView: 3,
      spaceBetween: 9,
      freeMode: true,
      direction: 'vertical',
      watchSlidesVisibility: true,
      watchSlidesProgress: true
    });
    var mySwiperMain = new Swiper(galleryMain, {
      slidesPerView: 1,
      allowTouchMove: false,
      spaceBetween: 0,
      loop: true,
      loopedSlides: 3,
      preloadImages: false,
      thumbs: {
        swiper: mySwiperThumb
      }
    });
  }

  // products slider
  var productsSlider = document.querySelector('.products__slider .swiper');
  if (productsSlider) {
    var myProductsSlider = new Swiper(productsSlider, {
      slidesPerView: 4,
      spaceBetween: 20,
      speed: 600,
      navigation: {
        prevEl: '.products__slider .swiper-button-prev',
        nextEl: '.products__slider .swiper-button-next'
      }
    });
  }
});